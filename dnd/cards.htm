<!DOCTYPE html>
<html>
<head>
  <title>TTRPG Cards Creator</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="common.css">
  <script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" scr="https://unpkg.com/fabric@5.3.0/dist/fabric.min.js"></script>
  <script type="text/javascript" src="common.js"></script>
  <script type="text/javascript" src="equipment.json"></script>
  <script type="text/javascript" src="npcs.json"></script>
  <style>
    @media print {
      #card-controls { visibility: hidden; }
      #card-container { visibility: visible; position: absolute; left: 0; top: 0; padding: 100px 0px 100px 0px; }
    }
  </style>
</head>

<body>

<div id="card-controls" style="position:absolute; left: 0px; top: 0px;">
  <label for="controls-groups">Groups (Categories):</label><br/ >
  <select id="controls-groups" onchange="selectGroup(this);" style="width:200px;">
    <option value=""></option>
  </select><br /><br />
  <select id="controls-custom-select" size="28" style="width:200px;">
  </select><br /><br />
  <label for="controls-image-back">Image Back:</label>
  <select id="controls-image-back" name="image_back" onchange="setPreferences(this);">
    <option value="image" selected="selected">Defined Image</option>
    <option value="icon">Type Icon</option>
    <option value="none">Nothing</option>
  </select><br />
  <label for="controls-image-front">Image Front:</label>
  <select id="controls-image-front" name="image_front" onchange="setPreferences(this);">
    <option value="image">Defined Image</option>
    <option value="icon">Type Icon</option>
    <option value="none" selected="selected">Nothing</option>
  </select><br />
  <label for="controls-front-bottom">Front Bottom:</label>
  <select id="controls-front-bottom" name="front_bottom" onchange="setPreferences(this);">
    <option value="none" selected="selected">Nothing</option>
    <option value="code">Stat Code</option>
  </select>
</div>

<div id="card-container" class="card-container">
  <ul class="cards" id="cards">
  </ul>
</div>

<script type="text/javascript">
  var i = 0;
  var groups = {};
  var items = getAPI()['results'];
  var preferences = { "image_back": "image", "image_front": "none" };

  function getAPI(r_url, r_async) {
    var r_text;
    if ( r_url == undefined) { var r_url = "/api/magic-items/"; }
    $.get({
      url: "https://www.dnd5eapi.co" + r_url,
      success: function(result) { r_text = result },
      error: function(xhr, error) { console.log(xhr) },
      async: r_async || false
    });
    return r_text;
  }

  function getCard(id) {
    var card;
    $.each( equipment, function( key, value ) {
      if ( value.index == id ) {
	card = value;
	card.source = "equipment";
      }
    });
    $.each( npcs, function( key, value ) {
      if ( 'npc-' + value.name.replaceAll(' ','-').toLowerCase() == id ) {
	card = value;
	card.source = "npcs";
	if ( card.desc == undefined ) {
	    card.desc = []; var eyes = ""; var hair = ""; var skin = "";
	    card.desc[0] = value.age[0] + ' ' + value.gender.title + ' (' + value.gender.pronouns.join('/') + ') ' + value.race.title + ' ' + ( value.occupation || value.type.title )
	    if ( value.alignment !== undefined ) {
	      if ( card.desc[0].length > 45 ) { var al = ', ' + value.alignment[0] } else { var al = ', ' + value.alignment[1]; }
	    } else { var al = ''; }
	    card.desc[0] += al;
	    card.desc[1] = value.description;
	    if ( value.eyes !== undefined && value.eyes !== "" )  { var eyes = ', ' + value.eyes + ' eyes' }
	    if ( value.hair !== undefined && value.hair !== "" )  { var hair = ', ' + value.hair + ' hair' }
	    if ( value.skin !== undefined && value.skin !== "" )  { var skin = ', ' + value.skin + ' skin' }
	    if ( value.ideal !== undefined || value.bond !== undefined || value.flaw !== undefined ) {
	      card.desc[2] = '<b>Ideal:</b> ' + value.ideal + '<br /><b>Bond:</b> ' + value.bond + '<br /><b>Flaw:</b> ' + value.flaw;
	    } else if ( value.goals !== undefined ) {
	      card.desc[2] = '<b>Goals:</b> ' + value.goals.join(', ');
	    }
	    card.desc[2] += '<br /><br /><b>Relationship:</b> ' + value.relationship + ' (' + value.orientation + ')' + '<br /><b>Appearance:</b> ' + value.appearance + eyes + hair + skin
		 + '<br /><b>Interaction Trait(s):</b> ' + value.interaction_trait + '<br /><b>Mannerism(s):</b> ' + value.mannerism + '<br/><b>Talent(s):</b> ' + value.talent
		 + '<br /><br /><b>Stats:</b> ' + value.type.title + ' (' + value.stats.join(', ') + ')<br /><b>AC:</b> ' + value.ac + '<br /><b>HP:</b> ' + value.hp[0] + ' (' + value.hp[1] + ')' + '<br /><b>Speed:</b> ' + value.speed
	}
      }
    });
    $.each( items, function( key, value ) {
      if ( value.index == id ) {
	card = getAPI(value.url);
	card.source = "api";
      }
    });
    return card;
  }

  function createCard(id) {
    var desc = "";
    var notes = "";
    var card = getCard(id);
    if ( card.equipment_category ) {
      var icon = "img/" + card.equipment_category.index + ".png";
    } else if ( card.type ) {
      var icon = "img/character.png";
    } else {
      var icon = "img/general.png";
    }
    if ( card ) {
	$('<li>', { class: 'cards_item', id: 'cards_item-' + id + '-' + i }).appendTo('#cards');
	$('<div>', { class: 'card', id: 'card-' + id + '-' + i }).appendTo('#cards_item-' + id + '-' + i);
	$('<div>', { class: 'card_image', id: 'card_image-' + id + '-' + i }).appendTo('#card-' + id + '-' + i);
	if ( preferences.image_back == "image" && card.image !== undefined ) {
	  $('<img>', { src: card.image }).appendTo('#card_image-' + id + '-' + i);
	} else if ( preferences.image_back == "icon" ) {
	  $('<img>', { src: icon }).appendTo('#card_image-' + id + '-' + i);
	}
	$('<div>', { class: 'card_content', id: 'card_content-' + id + '-' + i }).appendTo('#card-' + id + '-' + i);
	$('<div>', { class: 'card_icon', id: 'card_icon-' + id + '-' + i }).appendTo('#card_content-' + id + '-' + i);
	if ( preferences.image_front == "image" && card.image !== undefined ) {
	  $('<img>', { src: card.image }).appendTo('#card_icon-' + id + '-' + i);
	} else if ( preferences.image_front == "icon" ) {
	  $('<img>', { src: icon }).appendTo('#card_icon-' + id + '-' + i);
	}
	$('<h4>', { html: card.name }).appendTo('#card_content-' + id + '-' + i);
	$('<p>', { class: 'info', html: card.desc[0] }).appendTo('#card_content-' + id + '-' + i);
	$.each( card.desc, function( k, v ) {
	  if ( k > 0 ) { desc = desc + '<p>' + markdownParser(v) + '</p>'; }
	});
	$('<p>', { class: 'content', html: desc }).appendTo('#card_content-' + id + '-' + i);
	if ( card.properties !== undefined ) {
	  $.each( card.properties, function( k, v ) {
	    if ( k > 0 ) { notes = notes + ', ' + v; } else { notes = notes + "<br /><b>Notes</b>: " + v; }
	  });
	} else if ( card.saying !== undefined ) {
	  notes = '<i>"' + card.saying + '"</i>'
	}
	if ( notes != "" ) {
	  $('<p>', { class: 'notes', html: notes }).appendTo('#card_content-' + id + '-' + i);
	}
        i += 1;	// increment counter to ensure unique ids
    }
  }

  function selectGroup(el) {
    $('#grid-container').empty();
    var sel = el.options[el.selectedIndex].value;
    $.each( groups[sel], function( key, value ) {
      createCard(value);
    });
  }

  function setPreferences(el) {
    var sel = el.options[el.selectedIndex].value;
    preferences[el.name] = sel;
console.log(preferences);
  }

  // populate select lists and register callback
  var categories = getAPI("/api/equipment-categories")['results'];
  $.each( categories, function ( key, value ) {
    $('#controls-groups').append('<option id="' + value.index + '" value="' + value.index +'">' + value.name +'</option>');
    groups[value.index] = [];
    var equip = getAPI(value.url)['equipment'];
    $.each( equip, function( k, v ) {
      groups[value.index].push(v.index);
    });
  });
  // special non-equipment groups that will be populated below
  $('#controls-groups').append('<option id="npcs" value="npcs">NPCs</option>'); groups['npcs'] = [];

  $.each( equipment, function( key, value ) {
    $('#controls-custom-select').append($("<option />").val(value.index).text(value.name));
    $.each( groups, function( k, v ) {
      if ( k == value.equipment_category.index ) { groups[k].push(value.index); }
    });
  });
  $.each( items, function( key, value ) {
    $('#controls-custom-select').append($("<option />").val(value.index).text(value.name));
  });
  $.each( npcs, function( key, value ) {
    $('#controls-custom-select').append($("<option />").val( 'npc-' + value.name.replaceAll(' ','-').toLowerCase() ).text( value.name + ' (' + value.race.title + ' ' + ( value.occupation || value.type.title ) + ' NPC)' ));
    groups['npcs'].push('npc-' + value.name.replaceAll(' ','-').toLowerCase());
  });
  document.getElementById('controls-custom-select').ondblclick = function() {
    createCard(this.options[this.selectedIndex].value);
  };
</script>

</body>
</html>