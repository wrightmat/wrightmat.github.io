<!DOCTYPE html>
<html>
<head>
  <title>TTRPG Cards Creator</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="common.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script type="text/javascript" src="common.js"></script>
  <script type="text/javascript" src="equipment.json"></script>
  <script type="text/javascript" src="npcs.json"></script>
  <style>
    @media print {
      #card-controls { visibility: hidden; }
      #card-container { visibility: visible; position: absolute; left: 0; top: 0; }
    }
  </style>
</head>

<body>

<div id="card-controls" style="position:absolute; left: 0px; top: 0px;">
  <label for="controls-groups">Groups (Categories):</label><br/ >
  <select id="controls-groups" onchange="selectGroup(this);" style="width:200px;">
    <option value=""></option>
  </select><br /><br />
  <select id="controls-custom-select" size="28" style="width:200px;">
  </select><br /><br />
  <label for="controls-card-design">Card Design:</label>
  <select id="controls-card-design" name="card_design" onchange="setPreferences(this);">
    <option value="standard" selected="selected">Standard (Item or NPC)</option>
    <option value="modular">Modular Weapon (Vestige)</option>
    <option value="npc">NPC (Strixhaven)</option>
    <option value="stat-code">Stat Code</option>
  </select><br /><br />
  <label for="controls-image-back">Image Back:</label>
  <select id="controls-image-back" name="image_back" onchange="setPreferences(this);">
    <option value="image" selected="selected">Defined Image</option>
    <option value="icon">Type Icon</option>
    <option value="none">Nothing</option>
  </select><br />
  <label for="controls-image-back-override">Image Override: </label><input id="controls-image-back-override" /><br /><br />
  <label for="controls-image-front">Image Front:</label>
  <select id="controls-image-front" name="image_front" onchange="setPreferences(this);">
    <option value="image">Defined Image</option>
    <option value="icon">Type Icon</option>
    <option value="none" selected="selected">Nothing</option>
  </select><br />
  <label for="controls-image-front-override">Image Override: </label><input id="controls-image-front-override" /><br /><br />
</div>

<div id="card-container" class="card-container">
  <ul class="cards" id="cards"></ul>
</div>

<script type="text/javascript">
  var i = 0; var groups = {};
  var items = getAPI()['results'];
  var preferences = { "image_back": "image", "image_front": "none", "card_design": "standard" };

  function getAPI(r_url, r_async) {
    var r_text;
    if ( r_url == undefined) { var r_url = "/api/magic-items/"; }
    $.get({
      url: "https://www.dnd5eapi.co" + r_url,
      success: function(result) { r_text = result },
      error: function(xhr, error) { console.log(xhr) },
      async: r_async || false
    });
    return r_text;
  }

  function getCard(id) {
    var card;
    $.each( equipment, function( key, value ) {
      if ( value.index == id ) {
	card = value; card.source = "equipment";
      }
    });
    $.each( npcs, function( key, value ) {
      if ( 'npc-' + value.name.replaceAll(' ','-').toLowerCase() == id ) {
	card = value; card.source = "npcs";
	if ( card.desc == undefined ) {
	    card.desc = []; var eyes = ''; var hair = ''; var skin = ''; card.desc[0] = '';
	    if ( value.age ) { card.desc[0] += value.age[0] + ' '; }
	    if ( value.gender ) { card.desc[0] += ' (' + value.gender.pronouns.join('/') + ') '; }
	    if ( value.race ) { card.desc[0] +=  value.race.title + ' ' + ( value.occupation || value.type.title ); }
	    if ( value.alignment ) {
	      if ( card.desc[0].length > 36 ) { var al = ', ' + value.alignment[0] } else { var al = ', ' + value.alignment[1]; }
	    } else { var al = ''; }
	    card.desc[0] += al;
	    card.desc[1] = value.description;
	    if ( value.eyes !== undefined && value.eyes !== "" )  { var eyes = ', ' + value.eyes + ' eyes' }
	    if ( value.hair !== undefined && value.hair !== "" )  { var hair = ', ' + value.hair + ' hair' }
	    if ( value.skin !== undefined && value.skin !== "" )  { var skin = ', ' + value.skin + ' skin' }
	    if ( value.ideal !== undefined || value.bond !== undefined || value.flaw !== undefined ) {
	      card.desc[2] = '<b>Ideal:</b> ' + ( value.ideal || ' - ' ) + '<br /><b>Bond:</b> ' + ( value.bond || ' - ' ) + '<br /><b>Flaw:</b> ' + ( value.flaw || ' - ' );
	    } else if ( value.goals !== undefined ) {
	      card.desc[2] = '<b>Goals:</b> ' + value.goals.join(', ');
	    }
	    if ( value.relationship ) { card.desc[2] += '<br /><br /><b>Relationship:</b> ' + value.relationship + ' (' + value.orientation + ')' + '<br />'; }
	    if ( value.appearance ) { card.desc[2] += '<b>Appearance:</b> ' + value.appearance + eyes + hair + skin + '<br />'; }
	    if ( value.interaction_trait ) { card.desc[2] += '<b>Interaction Trait(s):</b> ' + value.interaction_trait + '<br />'; }
	    if ( value.mannerism ) { card.desc[2] += '<b>Mannerism(s):</b> ' + value.mannerism + '<br/>'; }
	    if ( value.talent ) { card.desc[2] += '<b>Talent(s):</b> ' + value.talent; }
	    if ( value.stats ) { card.desc[2] += '<br /><br /><b>Stats:</b> ' + value.type.title + ' (' + value.stats.join(', ') + ')<br />'; }
	    if ( value.ac ) { card.desc[2] += '<b>AC:</b> ' + value.ac + '<br />'; }
	    if ( value.hp ) { card.desc[2] += '<b>HP:</b> ' + value.hp[0] + ' (' + value.hp[1] + ')' + '<br />'; }
	    if ( value.speed ) { card.desc[2] += '<b>Speed:</b> ' + value.speed; }
	}
      }
    });
    $.each( items, function( key, value ) {
      if ( value.index == id ) {
	card = getAPI(value.url); card.source = "api";
      }
    });
    return card;
  }

  function createCard(id) {
    var card = getCard(id);
    id = id.replaceAll('"','').replaceAll("'","");  // eliminate any special characters that don't play nicely with the DOM
    if ( card.equipment_category ) {
      var icon = "img/" + card.equipment_category.index + ".png";
    } else if ( card.type ) {
      var icon = "img/character.png";
    } else {
      var icon = "img/general.png";
    }
    if ( card ) {
	// Container
	$('<li>', { class: 'cards_item', id: 'cards_item-' + id + '-' + i }).appendTo( '#cards' );
	$('<div>', { class: 'card', id: 'card-' + id + '-' + i }).appendTo( '#cards_item-' + id + '-' + i );

	// Back
	var back_cls; if ( preferences.image_back == "icon" ) { back_cls = "icon" } else { back_cls = "image" }
	$('<div>', { class: 'card_back', id: 'card_back-' + id + '-' + i }).appendTo( '#card-' + id + '-' + i );
	if ( preferences.card_design == "standard" ) {
	  $('<div>', { class: back_cls, id: back_cls + '-' + id + '-' + i }).appendTo( '#card_back-' + id + '-' + i );
	  if ( preferences.image_back == "image" && $('#controls-image-back-override').val() !== "" ) {
	    $('<img>', { src: $('#controls-image-back-override').val() }).appendTo( '#' + back_cls + '-' + id + '-' + i );
	  } else if ( preferences.image_back == "image" && card.image !== undefined ) {
	    $('<img>', { src: card.image }).appendTo( '#' + back_cls + '-' + id + '-' + i );
	  } else if ( preferences.image_back == "icon" ) {
	    $('<img>', { src: icon }).appendTo( '#' + back_cls + '-' + id + '-' + i );
	  }
	} else if ( preferences.card_design == "npc" ) {
	  $('<div>', { class: 'header', id: 'card_back-header-' + id + '-' + i }).appendTo( '#card_back-' + id + '-' + i );
	  if ( card.type.title == "Professor" ) {
	    $('<div>', { class: 'topright', html: '<i class="bi bi-mortarboard"></i>' }).appendTo( '#card_back-' + id + '-' + i );
	  } else if ( card.type.title == "Student" ) {
	    $('<div>', { class: 'topright', html: '<i class="bi bi-backpack"></i>' }).appendTo( '#card_back-' + id + '-' + i );
	  }
	  $('<h4>', { html: card.name }).appendTo( '#card_back-header-' + id + '-' + i );
	  $('<p>', { class: 'info', html: '(' + card.gender.pronouns.join('/') + ')' }).appendTo( '#card_back-header-' + id + '-' + i );
	  $('<div>', { class: 'footer', id: 'card_back-footer-' + id + '-' + i }).appendTo( '#card_back-' + id + '-' + i );
	  if ( card.extracurriculars ) { $('<p>', { html: '<b>Extracurriculars</b>: ' + card.extracurriculars.join(', ') }).appendTo( '#card_back-footer-' + id + '-' + i ); }
	  if ( card.job ) { $('<p>', { html: '<b>Job:</b> ' + card.job }).appendTo( '#card_back-footer-' + id + '-' + i ); }
	  $('<div>', { class: back_cls, id: back_cls + '-' + id + '-' + i }).appendTo( '#card_back-' + id + '-' + i );
	  $('<img>', { src: card.image }).appendTo( '#' + back_cls + '-' + id + '-' + i );
	  $('<div>', { class: 'imagetext', id: 'card_back-imagetext-' + id + '-' + i }).appendTo( '#card_back-' + id + '-' + i );
	  $('<p>', { html: card.alignment[0] + ' ' + card.race.title + ' ' + card.occupation }).appendTo( '#card_back-imagetext-' + id + '-' + i );
	}

	// Front
	if ( preferences.card_design == "standard" || preferences.card_design == "npc" ) {
	  $('<div>', { class: 'card_content', id: 'card_content-' + id + '-' + i }).appendTo('#card-' + id + '-' + i);
	  $('<div>', { class: 'card_icon', id: 'card_icon-' + id + '-' + i }).appendTo('#card_content-' + id + '-' + i);
	  if ( preferences.image_front == "image" && $('#controls-image-front-override').val() !== "" ) {
	    $('<img>', { src: $('#controls-image-front-override').val() }).appendTo('#card_image-' + id + '-' + i);
	  } else if ( preferences.image_front == "image" && card.image !== undefined ) {
	    $('<img>', { src: card.image }).appendTo('#card_icon-' + id + '-' + i);
	  } else if ( preferences.image_front == "icon" ) {
	    $('<img>', { src: icon }).appendTo('#card_icon-' + id + '-' + i);
	  }
	  $('<h4>', { html: card.name }).appendTo('#card_content-' + id + '-' + i);
	  if ( card.desc !== undefined ) {
	    var desc = "";
	    $('<p>', { class: 'info', html: card.desc[0] }).appendTo('#card_content-' + id + '-' + i);
	    $.each( card.desc, function( k, v ) {
	      if ( k > 0 ) { desc = desc + '<p>' + marked.parse(v, { gfm: true }) + '</p>'; }
	    });
	    $('<p>', { class: 'content', html: desc }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.weapon_category !== undefined ) {
	    var atk = "<b>Attack</b>: " + card.weapon_category;	var rng = "";
	    if ( card.weapon_range == "Melee" ) { rng = "Reach " } else { rng = "Range " }
	    if ( card.range !== undefined ) { atk += " (" + rng + card.range.normal + " ft.)" }
	    $('<p>', { class: 'content', html: atk }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.damage !== undefined ) {
	    var dmg = "<b>Damage</b>: " + card.damage.damage_dice;
	    if ( card.two_handed_damage !== undefined ) { dmg += " (" + card.two_handed_damage.damage_dice + ")" }
	    dmg += " " + card.damage.damage_type.name
	    $('<p>', { class: 'content', html: dmg }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.properties !== undefined ) {
	    var props = "";
	    $.each( card.properties, function( k, v ) {
	      if ( k > 0 ) { props = props + ', ' + v.name; } else { props = props + "<b>Properties</b>: " + v.name; }
	    }); props += '<br />'
	    $('<p>', { class: 'content', html: props }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.boon || card.bane ) {
	    $('<p>', { class: 'content', html: '<b>Boon:</b> ' + card.boon }).appendTo('#card_content-' + id + '-' + i);
	    $('<p>', { class: 'content', html: '<b>Bane:</b> ' + card.bane }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.notes !== undefined || card.saying !== undefined ) {
	    var notes = "";
	    if ( card.notes !== undefined ) {
	      notes = "<br /><b>Notes</b>: " + card.notes;
	    } else if ( card.saying !== undefined ) {
	      notes = '<i>"' + card.saying + '"</i>'
	    }
	    $('<p>', { class: 'notes', html: notes }).appendTo('#card_content-' + id + '-' + i);
	  }
	} else if ( preferences.card_design == "modular" ) {
	  $('<div>', { class: 'card_content', id: 'card_content-' + id + '-' + i }).appendTo('#card-' + id + '-' + i);
	  $('<div>', { class: 'card_icon', id: 'card_icon-' + id + '-' + i }).appendTo('#card_content-' + id + '-' + i);
	  if ( preferences.image_front == "image" && $('#controls-image-front-override').val() !== "" ) {
	    $('<img>', { src: $('#controls-image-front-override').val() }).appendTo('#card_image-' + id + '-' + i);
	  } else if ( preferences.image_front == "image" && card.image !== undefined ) {
	    $('<img>', { src: card.image }).appendTo('#card_icon-' + id + '-' + i);
	  } else if ( preferences.image_front == "icon" ) {
	    $('<img>', { src: icon }).appendTo('#card_icon-' + id + '-' + i);
	  }
	  $('<h4>', { html: card.name }).appendTo('#card_content-' + id + '-' + i);
	  if ( card.desc !== undefined ) { $('<p>', { class: 'info', html: card.desc[0] }).appendTo('#card_content-' + id + '-' + i); }
	  if ( card.weapon_category !== undefined ) {
	    var atk = "<b>Attack</b>: " + card.weapon_category;	var rng = "";
	    if ( card.weapon_range == "Melee" ) { rng = "Reach " } else { rng = "Range " }
	    if ( card.range !== undefined ) { atk += " (" + rng + card.range.normal + " ft.)" }
	    $('<p>', { class: 'content', html: atk }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.damage !== undefined ) {
	    var dmg = "<b>Damage</b>: " + card.damage.damage_dice;
	    if ( card.two_handed_damage !== undefined ) { dmg += " (" + card.two_handed_damage.damage_dice + ")" }
	    dmg += " " + card.damage.damage_type.name
	    $('<p>', { class: 'content', html: dmg }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.properties !== undefined ) {
	    var props = "";
	    $.each( card.properties, function( k, v ) {
	      if ( k > 0 ) { props = props + ', ' + v.name; } else { props = props + "<b>Properties</b>: " + v.name; }
	    }); props += '<br />'
	    $('<p>', { class: 'content', html: props }).appendTo('#card_content-' + id + '-' + i);
	  }
	  if ( card.desc !== undefined ) {
	    $('<p>', { class: 'content', html: card.desc[1] }).appendTo('#card_content-' + id + '-' + i);
	  }
	  // Ability Slots
	  var abilities = $('<div>', { class: 'card_ability_container' }).appendTo('#card_content-' + id + '-' + i);
	  $('<div>', { class: 'card_ability_block', id: 'card_ability-1-' + id + '-' + i }).appendTo( abilities );
	  $('<div>', { class: 'card_ability_block', id: 'card_ability-2-' + id + '-' + i }).appendTo( abilities );
	  $('<div>', { class: 'card_ability_block', id: 'card_ability-3-' + id + '-' + i }).appendTo( abilities );
	}
        i += 1;	// increment counter to ensure unique ids
    }
    $('#controls-image-back-override').val("")
    $('#controls-image-front-override').val("")
  }

  function selectGroup(el) {
    $('#grid-container').empty();
    var sel = el.options[el.selectedIndex].value;
    $.each( groups[sel], function( key, value ) {
      createCard(value);
    });
  }

  function setPreferences(el) {
    var sel = el.options[el.selectedIndex].value;
    preferences[el.name] = sel;
  }

  // populate select lists and register callback
  var categories = getAPI("/api/equipment-categories")['results'];
  $.each( categories, function ( key, value ) {
    $('#controls-groups').append('<option id="' + value.index + '" value="' + value.index +'">' + value.name +'</option>');
    groups[value.index] = [];
    var equip = getAPI(value.url)['equipment'];
    $.each( equip, function( k, v ) {
      groups[value.index].push(v.index);
    });
  });
  // special non-equipment groups that will be populated below
  $('#controls-groups').append('<option id="npcs" value="npcs">NPCs</option>'); groups['npcs'] = [];

  $.each( equipment, function( key, value ) {
    $('#controls-custom-select').append($("<option />").val(value.index).text(value.name));
    $.each( groups, function( k, v ) {
      if ( k == value.equipment_category.index ) { groups[k].push(value.index); }
    });
  });
  $.each( items, function( key, value ) {
    $('#controls-custom-select').append($("<option />").val(value.index).text(value.name));
  });
  $.each( npcs, function( key, value ) {
    $('#controls-custom-select').append($("<option />").val( 'npc-' + value.name.replaceAll(' ','-').toLowerCase() ).text( value.name + ' (' + value.race.title + ' ' + ( value.occupation || value.type.title ) + ' NPC)' ));
    groups['npcs'].push('npc-' + value.name.replaceAll(' ','-').toLowerCase());
  });
  document.getElementById('controls-custom-select').ondblclick = function() {
    createCard(this.options[this.selectedIndex].value);
  };
</script>

</body>
</html>