<!DOCTYPE html>
<html>
<head>
  <title>TTRPG NFC Dice Tower</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="common.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css">
  <script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="https://unpkg.com/fabric@5.3.0/dist/fabric.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.4/howler.min.js"></script>
  <script type="text/javascript" src="common.js"></script>
</head>

<body>

<canvas id="c" style="position:absolute;height:100%;width:100%;z-index:-1;"></canvas>
<div class="container-fluid">
  <nav class="navbar navbar-expand navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#"><h1><i class="bi bi-dice-6"></i></h1></a>

      <div class="collapse navbar-collapse" id="navbarsExample02">
        <ul class="navbar-nav me-auto">
          <li class="nav-item">
            <button type="button" class="btn btn-dark" id="scanButton">Start Scanning</button>
          </li>
          <li class="nav-item">
	    <button type="button" class="btn btn-dark" id="fullscreenButton" onclick="toggleFullScreen();">Toggle Full Screen</button>
          </li>
        </ul>
      </div>
      <div class="container-fluid">
        <div id="error-log" class="alert alert-primary pt-1" style="overflow-y:scroll;height:50px;"></div>
      </div>
    </div>
  </nav>
</div>

<script type="text/javascript">
  const canvas = document.getElementById("c");
  const ctx = canvas.getContext("2d");
  const iw = window.innerWidth;
  const ih = window.innerHeight;

  // Show console log on screen (helpful for mobile)
  console.log = (function (old_function, div_log) { 
    return function (text) {
        old_function(text);
	div_log.prepend(text);
    };
  } (console.log.bind(console), document.getElementById("error-log")));

  // Fullscreen
  function toggleFullScreen() {
    if (!document.fullscreenElement &&    // alternative standard method
      !document.mozFullScreenElement && !document.webkitFullscreenElement) {  // current working methods
      if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
      } else if (document.documentElement.mozRequestFullScreen) {
        document.documentElement.mozRequestFullScreen();
      } else if (document.documentElement.webkitRequestFullscreen) {
        document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      }
    } else {
      if (document.cancelFullScreen) {
        document.cancelFullScreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitCancelFullScreen) {
        document.webkitCancelFullScreen();
      }
    }
  }

  function canvasColor(color) {
    ctx.rect(0, 0, iw, ih);
    ctx.fillStyle = color;
    ctx.fill();
  }

  function canvasText(text) {
    ctx.font = "30px Arial";
    ctx.fillStyle = "white";
    ctx.textAlign = "center";
    ctx.fillText(text, canvas.width/2, canvas.height/2);
  }

  function playSound(url) {
    var sound = new Howl({
      src: [url]
    });
    sound.play();
  }

  function speak(text, callback) {
    var u = new SpeechSynthesisUtterance();
    u.text = text;
    u.lang = 'en-US';
 
    u.onend = function () {
      if (callback) { callback(); }
    };
 
    u.onerror = function (e) {
      if (callback) { callback(e); }
    };
 
    speechSynthesis.speak(u);
  }

  // NFC scanning
  document.querySelector("#scanButton").onclick = async () => {
    try {
      const ndef = new NDEFReader();
      ndef
	.scan()
	.then(() => {
	  console.log("Scan started successfully.");
	  ndef.onreadingerror = (event) => {
	    console.log("Error! Cannot read data from the NFC tag.");
	  };
	  ndef.onreading = (event) => {
	    canvasColor("green");
	    const message = event.message;
	    for (const record of message.records) {
	      console.log("Record type:  " + record.recordType);
	      console.log("MIME type:    " + record.mediaType);
	      console.log("Record id:    " + record.id);
	      switch (record.recordType) {
	        case "text":
	          const textDecoder = new TextDecoder(record.encoding);
		  console.log(`Text: ${textDecoder.decode(record.data)} (${record.lang})`);
		  parseResults(textDecoder.decode(record.data));
	          break;
	        case "url":
	          // TODO: Read URL record with record data.
	          break;
	        default:
	          // TODO: Handle other records with record data.
	      }
	    }
	  };
	})
	.catch((error) => {
	  console.log("Error! Scan failed to start: ${error}.");
	});
    } catch (error) {
      console.log(error);
    }
  }

  function parseResults(result) {
    // special cases (numbers that don't exist on standard dice sets)
    if ( parseInt(result) == 99 ) {
	canvasColor("green");
	canvasText("Treasure!");
	playSound("https://wrightmat.github.io/dnd/sfx/treasure.ogg");
    if ( parseInt(result) == 98 ) {
	canvasColor("red");
	canvasText("Roll Initiative!");
	speak("Roll Initiative!");
    // for basic numbers, just read out the number and show on screen
    } else if ( Number.isInteger(parseInt(result)) ) {
	canvasColor("blue");
	canvasText(result);
	speak(result);
    // likely a string - just show it on screen and read it out
    } else {
	canvasColor("blue");
	canvasText(result);
	speak(result);
    }
  }
</script>

</body>
</html>