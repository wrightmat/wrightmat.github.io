<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TTRPG Template Editor</title>
  <link href="https://unpkg.com/grapesjs/dist/css/grapes.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.min.css" rel="stylesheet">
  <script src="https://unpkg.com/grapesjs"></script>
  <script src="https://unpkg.com/grapesjs-tooltip"></script>
  <script src="https://unpkg.com/grapesjs-custom-code"></script>
  <script src="https://unpkg.com/grapesjs-blocks-basic"></script>
  <script src="https://unpkg.com/grapesjs-plugin-forms"></script>
  <script src="https://unpkg.com/mustache"></script>
  <style type="text/css">
    .panel-top {
      padding: 0;
      width: 100%;
      display: flex;
      position: initial;
      justify-content: center;
      justify-content: space-between;
    }
    .panel-right {
      flex-basis: 230px;
      position: relative;
      overflow-y: auto;
    }
    .editor-row {
      display: flex;
      justify-content: flex-start;
      align-items: stretch;
      flex-wrap: nowrap;
      height: 1000px;
    }
    .editor-canvas { flex-grow: 1; }
    .panel-switcher { position: initial; }
    .panel-devices { position: initial; }
    .panel-basic-actions { position: initial; }
  </style>
</head>

<body>

<div class="panel-top">
  <div class="panel-basic-actions"></div>
  <div class="panel-devices"></div>
  <div class="panel-switcher"></div>
</div>
<div class="editor-row">
  <div class="editor-canvas">
    <div id="gjs">
      <h1>Hello World!</h1>
<style>
  .stat-val {
    border:1px solid black; border-radius:100px; margin-left:20%; margin-right:20%; text-align:center;
  }
</style>
    </div>
  </div>
  <div class="panel-right">
    <div class="layers-container"></div>
    <div class="styles-container"></div>
    <div class="traits-container"></div>
    <div class="blocks-container"></div>
  </div>
</div>

<script>
  const editor = grapesjs.init({
    container: '#gjs',
    fromElement: true,
    // Size of the editor
    height: '1000px',
    width: 'auto',
    // Disable the storage manager for the moment
    storageManager: false,
    // Avoid any default panel
    panels: { defaults: [] },
    // Disable telemetry (getting a 400 response)
    telemetry: false,
    plugins: [
      'gjs-blocks-basic',
      'grapesjs-custom-code',
      'grapesjs-tooltip',
      'grapesjs-plugin-forms',
    ],
    pluginsOpts: {
      'gjs-blocks-basic': { flexGrid: true, blocks: ['column1', 'column2', 'column3', 'column3-7', 'text', 'link', 'image'] },
    },
    blockManager: {
      appendTo: '.blocks-container',
    },
    layerManager: {
      appendTo: '.layers-container',
    },
    selectorManager: {
      appendTo: '.styles-container',
    },
    traitManager: {
      appendTo: '.traits-container',
    },
    deviceManager: {
      devices: [
        {
          name: 'Desktop',
          width: '', // default size
        },{
          name: 'Mobile',
          width: '320px', // this value will be used on canvas width
          widthMedia: '480px', // this value will be used in CSS @media
        },{
          name: 'Tablet',
          width: '800px', // this value will be used on canvas width
          widthMedia: '800px', // this value will be used in CSS @media
        },
      ],
    },
    storageManager: {
      type: 'local', // Type of the storage, available: 'local' | 'remote'
      autosave: true, // Store data automatically
      autoload: true, // Autoload stored data on init
      stepsBeforeSave: 1, // If autosave enabled, indicates how many changes are necessary before store method is triggered
      options: {
        local: {
          key: 'gjsProject', // The key for the local storage
        },
      },
    },
    styleManager: {
      appendTo: '.styles-container',
      sectors: [{
        name: 'General',
        properties: [{
          extend: 'float',
          type: 'radio',
          default: 'none',
          options: [
            { value: 'none', className: 'fa fa-times'},
            { value: 'left', className: 'fa fa-align-left'},
            { value: 'right', className: 'fa fa-align-right'}
          ],
        },
        'display',
        { extend: 'position', type: 'select' },
        'top',
        'right',
        'left',
        'bottom',
        ],
      }, {
        name: 'Dimension',
        open: false,
        properties: [
          'width',
          {
            id: 'flex-width',
            type: 'integer',
            name: 'Width',
            units: ['px', '%'],
            property: 'flex-basis',
            toRequire: 1,
          },
          'height',
          'max-width',
          'min-height',
          'margin',
          'padding'
        ],
      },{
        name: 'Typography',
        open: false,
        properties: [
          'font-family',
          'font-size',
          'font-weight',
          'letter-spacing',
          'color',
          'line-height',
          {
            extend: 'text-align',
            options: [
              { id : 'left',  label : 'Left',    className: 'fa fa-align-left'},
              { id : 'center',  label : 'Center',  className: 'fa fa-align-center' },
              { id : 'right',   label : 'Right',   className: 'fa fa-align-right'},
              { id : 'justify', label : 'Justify',   className: 'fa fa-align-justify'}
            ],
          },{
            property: 'text-decoration',
            type: 'radio',
            default: 'none',
            options: [
              { id: 'none', label: 'None', className: 'fa fa-times'},
              { id: 'underline', label: 'underline', className: 'fa fa-underline' },
              { id: 'line-through', label: 'Line-through', className: 'fa fa-strikethrough'}
            ],
          },
          'text-shadow'
        ],
      },{
        name: 'Decorations',
        open: false,
        properties: [
          'opacity',
          'border-radius',
          'border',
          'box-shadow',
          'background', // { id: 'background-bg', property: 'background', type: 'bg' }
        ],
      },{
        name: 'Extra',
        open: false,
        buildProps: [
          'transition',
          'perspective',
          'transform'
        ],
      },{
        name: 'Flex',
        open: false,
        properties: [{
          name: 'Flex Container',
          property: 'display',
          type: 'select',
          defaults: 'block',
          list: [
            { value: 'block', name: 'Disable'},
            { value: 'flex', name: 'Enable'}
          ],
          },{
            name: 'Flex Parent',
            property: 'label-parent-flex',
            type: 'integer',
          },{
            name: 'Direction',
            property: 'flex-direction',
            type: 'radio',
            defaults: 'row',
                  list: [{
                    value: 'row',
                    name: 'Row',
                    className: 'icons-flex icon-dir-row',
                    title: 'Row',
                  },{
                    value: 'row-reverse',
                    name: 'Row reverse',
                    className: 'icons-flex icon-dir-row-rev',
                    title: 'Row reverse',
                  },{
                    value: 'column',
                    name: 'Column',
                    title: 'Column',
                    className: 'icons-flex icon-dir-col',
                  },{
                    value: 'column-reverse',
                    name: 'Column reverse',
                    title: 'Column reverse',
                    className: 'icons-flex icon-dir-col-rev',
                  }],
                },{
                  name: 'Justify',
                  property: 'justify-content',
                  type: 'radio',
                  defaults: 'flex-start',
                  list: [{
                    value: 'flex-start',
                    className: 'icons-flex icon-just-start',
                    title: 'Start',
                  },{
                    value: 'flex-end',
                    title: 'End',
                    className: 'icons-flex icon-just-end',
                  },{
                    value: 'space-between',
                    title: 'Space between',
                    className: 'icons-flex icon-just-sp-bet',
                  },{
                    value: 'space-around',
                    title: 'Space around',
                    className: 'icons-flex icon-just-sp-ar',
                  },{
                    value: 'center',
                    title: 'Center',
                    className: 'icons-flex icon-just-sp-cent',
                  }],
                },{
                  name: 'Align',
                  property: 'align-items',
                  type: 'radio',
                  defaults: 'center',
                  list: [{
                    value: 'flex-start',
                    title: 'Start',
                    className: 'icons-flex icon-al-start',
                  },{
                    value: 'flex-end',
                    title: 'End',
                    className: 'icons-flex icon-al-end',
                  },{
                    value: 'stretch',
                    title: 'Stretch',
                    className: 'icons-flex icon-al-str',
                  },{
                    value: 'center',
                    title: 'Center',
                    className: 'icons-flex icon-al-center',
                  }],
                },{
                  name: 'Flex Children',
                  property: 'label-parent-flex',
                  type: 'integer',
                },{
                  name: 'Order',
                  property: 'order',
                  type: 'integer',
                  defaults: 0,
                  min: 0
                },{
                  name: 'Flex',
                  property: 'flex',
                  type: 'composite',
                  properties  : [{
                    name: 'Grow',
                    property: 'flex-grow',
                    type: 'integer',
                    defaults: 0,
                    min: 0
                  },{
                    name: 'Shrink',
                    property: 'flex-shrink',
                    type: 'integer',
                    defaults: 0,
                    min: 0
                  },{
                    name: 'Basis',
                    property: 'flex-basis',
                    type: 'integer',
                    units: ['px','%',''],
                    unit: '',
                    defaults: 'auto',
                  }],
                },{
                  name: 'Align',
                  property: 'align-self',
                  type: 'radio',
                  defaults: 'auto',
                  list: [{
                    value: 'auto',
                    name: 'Auto',
                  },{
                    value: 'flex-start',
                    title: 'Start',
                    className: 'icons-flex icon-al-start',
                  },{
                    value: 'flex-end',
                    title: 'End',
                    className: 'icons-flex icon-al-end',
                  },{
                    value: 'stretch',
                    title: 'Stretch',
                    className: 'icons-flex icon-al-str',
                  },{
                    value: 'center',
                    title: 'Center',
                    className: 'icons-flex icon-al-center',
                  }],
                }]
              }
            ],

    },
  });


  // Define Blocks
  editor.BlockManager.add('section', {
    label: 'Section',
    category: 'Basic',
    media: '<svg style="width:64px;height:64px" viewBox="0 0 24 24"><path d="M21,6V8H3V6H21M3,18H12V16H3V18M3,13H21V11H3V13Z" /></svg>',
    activate: true,
    content: '<section class="bdg-sect"><h1 class="heading">Insert title here</h1><p class="paragraph">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p></section>'
  });
  editor.BlockManager.add('dice-roller', {
    label: 'Dice Roller',
    category: 'Extra',
    media: '<svg class="bi bi-dice-6" style="width:64px;height:64px" viewBox="0 0 16 16"><path d="M13 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2zM3 0a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h10a3 3 0 0 0 3-3V3a3 3 0 0 0-3-3z"/><path d="M5.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m8 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m-8 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/></svg>',
    activate: true,
    content: '<div class="dice-roller">`dice:1d20`</div>'
  });
  editor.BlockManager.add('stat-block-basic', {
    label: 'Stat Block (Basic)',
    category: 'Compound',
    media: '<svg class="bi bi-app-indicator" style="width:64px;height:64px" viewBox="0 0 16 16"><path d="M5.5 2A3.5 3.5 0 0 0 2 5.5v5A3.5 3.5 0 0 0 5.5 14h5a3.5 3.5 0 0 0 3.5-3.5V8a.5.5 0 0 1 1 0v2.5a4.5 4.5 0 0 1-4.5 4.5h-5A4.5 4.5 0 0 1 1 10.5v-5A4.5 4.5 0 0 1 5.5 1H8a.5.5 0 0 1 0 1z"/><path d="M16 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/></svg>',
    activate: true,
    content: '<div class="stat-block" style="border:1px solid black; border-radius:10px;"><h3 class="stat-heading" style="text-align:center;">Stat Name</h1><h1 class="stat-val" style="text-align:center;">{{Stat}}</h1><p> </p></div>'
  });
  editor.BlockManager.add('stat-block-mod', {
    label: 'Stat Block w/ Modifier',
    category: 'Compound',
    media: '<svg class="bi bi-app-indicator" style="width:64px;height:64px" viewBox="0 0 16 16"><path d="M5.5 2A3.5 3.5 0 0 0 2 5.5v5A3.5 3.5 0 0 0 5.5 14h5a3.5 3.5 0 0 0 3.5-3.5V8a.5.5 0 0 1 1 0v2.5a4.5 4.5 0 0 1-4.5 4.5h-5A4.5 4.5 0 0 1 1 10.5v-5A4.5 4.5 0 0 1 5.5 1H8a.5.5 0 0 1 0 1z"/><path d="M16 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/></svg>',
    activate: true,
    content: '<div class="stat-block" style="border:1px solid black; border-radius:10px;"><h3 class="stat-heading" style="text-align:center;">Stat Name</h1><h1 class="stat-mod dice-roller" style="text-align:center;">{{Stat_Mod}}</h1><p class="stat-val" style="border:1px solid black; border-radius:100px; margin-left:20%; margin-right:20%; text-align:center;">{{Stat}}</p></div>'
  });
  editor.BlockManager.add('stat-block-prof', {
    label: 'Stat Block w/ Proficiency',
    category: 'Compound',
    media: '<svg class="bi bi-app-indicator" style="width:64px;height:64px" viewBox="0 0 16 16"><path d="M5.5 2A3.5 3.5 0 0 0 2 5.5v5A3.5 3.5 0 0 0 5.5 14h5a3.5 3.5 0 0 0 3.5-3.5V8a.5.5 0 0 1 1 0v2.5a4.5 4.5 0 0 1-4.5 4.5h-5A4.5 4.5 0 0 1 1 10.5v-5A4.5 4.5 0 0 1 5.5 1H8a.5.5 0 0 1 0 1z"/><path d="M16 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/></svg>',
    activate: true,
    content: '<div class="stat-block" style="border:1px solid black; border-radius:10px;"><h3 class="stat-heading" style="text-align:center;">Stat Name</h1><h1 class="stat-mod dice-roller" style="text-align:center;">{{Stat_Mod}}</h1><p class="stat-val" style="border:1px solid black; border-radius:100px; margin-left:20%; margin-right:20%; text-align:center;">{{Stat}}</p></div>'
  });


  // Define Panels
  editor.Panels.addPanel({
    id: 'panel-top',
    el: '.panel-top',
  });
  editor.Panels.addPanel({
    id: 'basic-actions',
    el: '.panel-basic-actions',
    buttons: [
      {
        id: 'visibility',
        active: true, // active by default
        className: 'btn-toggle-borders',
        label: '<i class="bi bi-dash-square-dotted"></i>',
        command: 'sw-visibility',
      },{
        id: 'export',
        className: 'btn-open-export',
        label: '<i class="bi bi-code-slash"></i>',
        command: 'export-template',
        context: 'export-template', // For grouping context of buttons from the same panel
      },{
        id: 'show-json',
        className: 'btn-show-json',
        label: '<i class="bi bi-filetype-json"></i>',
        context: 'show-json',
        command(editor) {
          editor.Modal.setTitle('Components JSON')
            .setContent(
              `<textarea style="width:100%; height: 250px;">
              ${JSON.stringify(editor.getComponents())}
            </textarea>`,
            )
            .open();
        },
      },{
        id: 'canvas-clear',
        label: '<i class="bi bi-eraser"></i>',
        command: 'canvas-clear',
        active: true,
        togglable: false,
      },{
        id: 'preview',
        label: '<i class="bi bi-eye"></i>',
        command: 'preview',
        active: true,
        togglable: false,
      },{
        id: 'fullscreen',
        label: '<i class="bi bi-fullscreen"></i>',
        command: 'fullscreen',
        active: true,
        togglable: false,
      },{
        id: 'undo',
        label: '<i class="bi bi-arrow-counterclockwise"></i>',
        command: 'undo',
        active: true,
        togglable: false,
      },{
        id: 'redo',
        label: '<i class="bi bi-arrow-clockwise"></i>',
        command: 'redo',
        active: true,
        togglable: false,
      },
    ],
  });
  editor.Panels.addPanel({
    id: 'layers',
    el: '.panel-right',
    // Make the panel resizable
    resizable: {
      maxDim: 350,
      minDim: 200,
      tc: false, // Top handler
      cl: true, // Left handler
      cr: false, // Right handler
      bc: false, // Bottom handler
      // Being a flex child we need to change `flex-basis` property instead of the `width` (default)
      keyWidth: 'flex-basis',
    },
  });
  editor.Panels.addPanel({
    id: 'panel-switcher',
    el: '.panel-switcher',
    buttons: [
      {
        id: 'show-blocks',
        active: true,
        label: '<i class="bi bi-plus-square-fill"></i>',
        command: 'show-blocks',
        togglable: false,
      },{
        id: 'show-layers',
        active: true,
        label: '<i class="bi bi-layers-fill"></i>',
        command: 'show-layers',
        togglable: false,
      },{
        id: 'show-style',
        active: true,
        label: '<i class="bi bi-brush-fill"></i>',
        command: 'show-styles',
        togglable: false,
      },{
        id: 'show-traits',
        active: true,
        label: '<i class="bi bi-gear-fill"></i>',
        command: 'show-traits',
        togglable: false,
      },
    ],
  });
  editor.Panels.addPanel({
    id: 'panel-devices',
    el: '.panel-devices',
    buttons: [
      {
        id: 'device-desktop',
        label: '<i class="bi bi-display"></i>',
        command: 'set-device-desktop',
        active: true,
        togglable: false,
      },{
        id: 'device-mobile',
        label: '<i class="bi bi-phone"></i>',
        command: 'set-device-mobile',
        togglable: false,
      },{
        id: 'device-tablet',
        label: '<i class="bi bi-tablet-landscape"></i>',
        command: 'set-device-tablet',
        togglable: false,
      },
    ],
  });

  // Define commands
  editor.Commands.add('show-layers', {
    getRowEl(editor) {
      return editor.getContainer().closest('.editor-row');
    },
    getLayersEl(row) {
      return row.querySelector('.layers-container');
    },
    run(editor, sender) {
      const lmEl = this.getLayersEl(this.getRowEl(editor));
      lmEl.style.display = '';
    },
    stop(editor, sender) {
      const lmEl = this.getLayersEl(this.getRowEl(editor));
      lmEl.style.display = 'none';
    },
  });
  editor.Commands.add('show-styles', {
    getRowEl(editor) {
      return editor.getContainer().closest('.editor-row');
    },
    getStyleEl(row) {
      return row.querySelector('.styles-container');
    },
    run(editor, sender) {
      const smEl = this.getStyleEl(this.getRowEl(editor));
      smEl.style.display = '';
    },
    stop(editor, sender) {
      const smEl = this.getStyleEl(this.getRowEl(editor));
      smEl.style.display = 'none';
    },
  });
  editor.Commands.add('show-traits', {
    getTraitsEl(editor) {
      const row = editor.getContainer().closest('.editor-row');
      return row.querySelector('.traits-container');
    },
    run(editor, sender) {
      this.getTraitsEl(editor).style.display = '';
    },
    stop(editor, sender) {
      this.getTraitsEl(editor).style.display = 'none';
    },
  });
  editor.Commands.add('show-blocks', {
    getRowEl(editor) {
      return editor.getContainer().closest('.editor-row');
    },
    getLayersEl(row) {
      return row.querySelector('.blocks-container');
    },
    run(editor, sender) {
      const lmEl = this.getLayersEl(this.getRowEl(editor));
      lmEl.style.display = '';
    },
    stop(editor, sender) {
      const lmEl = this.getLayersEl(this.getRowEl(editor));
      lmEl.style.display = 'none';
    },
  });
  editor.Commands.add('set-device-desktop', {
    run: (editor) => editor.setDevice('Desktop'),
  });
  editor.Commands.add('set-device-mobile', {
    run: (editor) => editor.setDevice('Mobile'),
  });
  editor.Commands.add('set-device-tablet', {
    run: (editor) => editor.setDevice('Tablet'),
  });
  editor.Commands.add('canvas-clear', function() {
    if(confirm('Are you sure to clean the canvas?')) {
      editor.runCommand('core:canvas-clear')
      setTimeout(function(){ localStorage.clear()}, 0)
    }
  });
  editor.Commands.add('preview', function() {
    editor.runCommand('core:preview')
  });
  editor.Commands.add('fullscreen', function() {
    editor.runCommand('core:fullscreen')
  });
  editor.Commands.add('undo', function() {
    editor.runCommand('core:undo')
  });
  editor.Commands.add('redo', function() {
    editor.runCommand('core:redo')
  });

  //  Define tooltips
  [['visibility', 'Show/Hide Components'], ['export', 'Show HTML/CSS'], ['show-json', 'Show JSON'], ['canvas-clear', 'Clear Canvas'], ['preview', 'Preview'], ['fullscreen', 'Fullscreen'], ['undo', 'Undo'], ['redo', 'Redo']]
    .forEach(function(item) {
      editor.Panels.getButton('basic-actions', item[0]).set('attributes', {title: item[1], 'data-tooltip-pos': 'bottom'});
    });
  [['show-blocks', 'Show Blocks'], ['show-layers', 'Show Layer Manager'], ['show-style', 'Show Style Manager'], ['show-traits', 'Show Traits Manager']]
    .forEach(function(item) {
      editor.Panels.getButton('panel-switcher', item[0]).set('attributes', {title: item[1], 'data-tooltip-pos': 'bottom'});
    });
  [['device-desktop', 'Desktop View'], ['device-mobile', 'Mobile View'], ['device-tablet', 'Tablet View']]
    .forEach(function(item) {
      editor.Panels.getButton('panel-devices', item[0]).set('attributes', {title: item[1], 'data-tooltip-pos': 'bottom'});
    });

const Mustache = require('mustache');

</script>

</body>
</html>