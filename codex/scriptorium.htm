<!DOCTYPE html>
<html>
<head>
  <title>Codex Scriptorium: TTRPG Print Shop</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="images/icon_S_32.png" rel="icon" type="image/png" sizes="32x32">
  <link href="common.css" rel="stylesheet" type="text/css">
  <link href="ddb.css" rel="stylesheet" type="text/css">
  <link href="images/icons.css" rel="stylesheet" type="text/css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
  <link href="https://cdn.rawgit.com/fponticelli/dicefont/fc6b8c47/dist/dicefont/dicefont.css" rel="stylesheet">
  <link href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/ui/1.14.1/jquery-ui.min.js" integrity="sha256-AlTido85uXPlSyyaZNsjJXeCs07eSv3r43kyCVc8ChI=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js" type="text/javascript"></script>
  <script src="https://unpkg.com/mustache@latest" type="text/javascript"></script>
  <script src="common.js" type="text/javascript"></script>
  <script src="ddb_parser.js" type="text/javascript"></script>
</head>

<body>

<header id="header"></header>

<div id="controls" class="controls">
  <div id="controls-header" class="controls-header">â˜° Controls</div>
  <div id="controls-toolbar" class="controls-toolbar"></div>

  <div class="form-group" id="controls-container-sources">
    <label for="controls-sources">Sources</label>
    <select class="form-control" id="controls-sources" onchange="selectSource(this);"></select>
  </div>

  <div class="form-group" id="controls-container-groups">
    <label for="controls-groups">Groups (Categories)</label>
    <select class="form-control" id="controls-groups" onchange="selectGroup(this);"><option value=""></option></select>
  </div>

  <div class="form-group" id="controls-container-select">
    <select class="form-control" id="controls-select" size="16"></select>
  </div>

  <div class="form-group" id="controls-container-id">
    <label for="controls-id">ID</label><input class="form-control" id="controls-id" />
  </div>

  <div class="form-group" id="controls-container-template">
    <label for="controls-template">Template</label>
    <select class="form-control" id="controls-template" name="template">
      <option value="" selected="selected"></option>
    </select>
  </div>

  <div class="form-group" id="controls-container-size">
    <label for="controls-size">Size</label>
    <select class="form-control" id="controls-size" name="size">
      <option value="tarot" selected="selected">Tarot Card (2.75" x 4.75")</option>
      <option value="poker">Poker Card (2.5" x 3.5")</option>
      <option value="business">Business Card (2" x 3.5")</option>
      <option value="notecard">Notecard (5" x 7")</option>
      <option value="a6">A6 Paper (4.1" x 5.8")</option>
      <option value="b6">B6 Paper (4.9" x 6.9")</option>
      <option value="letter">Letter Paper (8.5" x 11")</option>
    </select>
  </div>

  <div class="form-group" id="controls-container-orientation">
    <label for="controls-orientation">Orientation</label>
    <select class="form-control" id="controls-orientation" name="orientation">
      <option value="vertical" selected="selected">Vertical</option>
      <option value="horizontal">Horizontal</option>
    </select>
  </div>
</div>

<div id="print-container" class="container" contenteditable="true">
  <div id="card-front" class="card-sheet front-sheet"></div>
  <div id="card-back" class="card-sheet back-sheet"></div>
  <div id="booklet-front" class="booklet-sheet front-sheet"></div>
  <div id="booklet-back" class="booklet-sheet back-sheet"></div>
</div>

<script type="text/javascript">
  window.sourceCache = {}
  var groups = {};
  var selectOptions;
  var preferences = { "image_back": "image", "image_front": "none", "template": "card-item", "size": "tarot", "orientation": "vertical" };
  const sourceDefinitions = [
    { id: 'ddb-characters', name: 'Characters (D&D Beyond)', edition: '5e', system: 'DnD', type: 'character', method: 'ddb', function: 'parseCharacter()' },
    { id: 'json-characters', name: 'Characters (JSON)', edition: '5e', system: 'DnD', type: 'character', method: 'json', path: 'data/characters.json' },
    { id: 'api-classes', name: 'Classes (API)', edition: '5e', system: 'DnD', type: 'class', method: 'api', url: '/api/classes' },
    { id: 'api-conditions', name: 'Conditions (API)', edition: '5e', system: 'DnD', type: 'condition', method: 'api', url: '/api/conditions' },
    { id: 'api-equipment', name: 'Equipment (API)', edition: '5e', system: 'DnD', type: 'equipment', method: 'api', url: '/api/equipment-categories', childKey: 'equipment' },
    { id: 'json-equipment', name: 'Equipment (JSON)', edition: '5e', system: 'DnD', type: 'equipment', method: 'json', path: 'data/equipment.json' },
    { id: 'api-features', name: 'Features (API)', edition: '5e', system: 'DnD', type: 'feature', method: 'api', url: '/api/features' },
    { id: 'api-magic-items', name: 'Magic Items (API)', edition: '5e', system: 'DnD', type: 'magic-item', method: 'api', url: '/api/magic-items' },
    { id: 'api-monsters', name: 'Monsters (API)', edition: '5e', system: 'DnD', type: 'monster', method: 'api', url: '/api/monsters' },
    { id: 'ddb-monsters', name: 'Monsters (D&D Beyond)', edition: '5e', system: 'DnD', type: 'monster', method: 'ddb', function: 'parseMonster()' },
    { id: 'json-monsters', name: 'Monsters (JSON)', edition: '5e', system: 'DnD', type: 'monster', method: 'json', path: 'data/monsters.json' },
    { id: 'api-races', name: 'Races (API)', edition: '5e', system: 'DnD', type: 'species', method: 'api', url: '/api/races' },
    { id: 'json-spells-2014', name: 'Spells, 2014 (JSON)', edition: '5e-2014', system: 'DnD', type: 'spell', method: 'json', path: 'data/spells_2014.json' },
    { id: 'json-spells-2024', name: 'Spells, 2024 (JSON)', edition: '5e-2024', system: 'DnD', type: 'spell', method: 'json', path: 'data/spells_2024.json' },
    { id: 'json-spells-misc', name: 'Spells, Misc. (JSON)', type: 'spell', method: 'json', path: 'data/spells_misc.json' },
    { id: 'api-subclasses', name: 'Subclasses (API)', edition: '5e', system: 'DnD', type: 'subclass', method: 'api', url: '/api/subclasses' },
    { id: 'api-subraces', name: 'Subraces (API)', edition: '5e', system: 'DnD', type: 'subrace', method: 'api', url: '/api/subraces' },
    { id: 'json-triskele-ancestries', name: 'Ancestries (Triskele)', system: 'triskele', type: 'ancestry', method: 'json', path: 'data/triskele_ancestries.json' },
    { id: 'json-triskele-backgrounds', name: 'Backgrounds (Triskele)', system: 'triskele', type: 'background', method: 'json', path: 'data/triskele_backgrounds.json' },
    { id: 'json-triskele-classes', name: 'Classes (Triskele)', system: 'triskele', type: 'class', method: 'json', path: 'data/triskele_classes.json' },
    { id: 'json-triskele-scenes', name: 'Scenes (Triskele)', system: 'triskele', type: 'scene', method: 'json', path: 'data/triskele_scenes.json' }
  ];
  $('#controls-container-id').hide();
  $('#controls-container-groups').hide();
  $('#controls-container-select').hide();

  function cleanText( txt ) {
    return txt.replaceAll(' ','-').replaceAll('"','').replaceAll("'","").replaceAll('(','').replaceAll(')','')
  }

  function setPreferences( el ) {
    if ( el && el.name ) {	  // If a specific element is passed, just update that one
      preferences[el.name] = el.value;
      return;
    }
    $('#controls-size, #controls-orientation, #controls-template').each(function() {
      if ( !this.disabled && this.name ) preferences[this.name] = this.value;
    });
  }

  function getAPI( r_url, r_async ) {
    var r_text;
    $.get({
      url: "https://www.dnd5eapi.co" + r_url,
      success: function(result) { r_text = result },
      error: function(xhr, error) { console.log(xhr) },
      async: r_async || false
    });
    return r_text;
  };

  function getPrintData( id, sourceId = null ) {
    let print = {};
    if ( !sourceId ) sourceId = $('#controls-sources').val();
    const source = sourceDefinitions.find( s => s.id === sourceId );
    if ( !source ) return print;

    const dataList = sourceCache[sourceId] || [];

    if ( source.method == 'json' ) {
      print = dataList.find( item => item.index === id ) || {};
    } else if ( source.method == 'api' ) {
      const itemMeta = dataList.find( item => item.index === id );
      if ( itemMeta && itemMeta.url ) print = getAPI(itemMeta.url);
    }

    print.id = cleanText(id);
    print.source = source;
    return print;
  };

  function parsePrintData( print ) {
    if ( !print ) return print;
    print.icons = [];
    print.preferences = preferences;

    if ( print.desc ) {	    // Markdown conversion
      print.descList = '';
      print.desc.forEach( d => print.descList += marked.parse(d) );
      print.desc = print.desc.map((v, i) => ( i > 0 && v ? marked.parse(v) : v) );
    }

    if ( print.cards ) {    // Card-ception, so we need to parse each index and grab the card contents
      print.cards.forEach(( c, ci ) => {
	let source;
        if ( !c.preferences) c.preferences = [];
	c.preferences.size = c.preferences?.size || 'tarot';
	c.preferences.orientation = c.preferences?.orientation || 'vertical';
        if ( c.type == 'npc' ) {
	  source = 'json-characters'
          $.ajax({ url: 'data/characters.json', dataType: 'json', async: false, success: function(data) { sourceCache[source] = data; } });
	} else if ( c.type == 'monster' ) {
	  source = 'json-monsters'
	  //$.ajax({ url: 'data/monsters.json', dataType: 'json', async: false, success: function(data) { sourceCache[source] = data; } });
	}
	print.cards[ci] = { ...c, ...getPrintData(c.index, source) };
      });
    }

    if ( print.ritual ) print.icons.push('ddb-ritual');
    if ( print.concentration ) print.icons.push('ddb-concentration');
    if ( print.casting_time ) print.casting_time = print.casting_time.replace('bonus action', 'BA').replace('reaction', 'R').replace('action', 'A');
    if ( print.duration ) print.duration = print.duration.replace('Concentration', 'Conc').replace('minute', 'min');
    if ( print.classes ) print.classList = print.classes.map(c => c.name).join(', ');
    if ( print.range ) print.range = print.range.replace('feet', 'ft.');

    if ( print.school ) {    // Spell school handling
      const baseSchool = print.school?.index ?? null;
      const additionalSchools = [];
      for ( const [school, list] of Object.entries(spell_additional_schools) ) {
        if ( list.includes(print.id) ) additionalSchools.push(school);
      }
      print.schools = baseSchool ? [baseSchool, ...additionalSchools] : [...additionalSchools];
    }
console.log(print);
    print.template = preferences.template;
    return print;
  };

  function createPrint( rawPrint ) {
    if ( !rawPrint ) return;
    const print = parsePrintData(rawPrint);
    const neededPartials = [ 'card-npc', 'card-npc-triskele' ]; //'card-monster'

    $.get('templates/' + print.template + '.htm', function( templateHtml ) {
      loadTemplatePartials( neededPartials, function(partials) {
        const rendered = Mustache.render(templateHtml, print, partials);
        const wrapper = $('<div>').html(rendered);
        const isBooklet = wrapper.find('.booklet').length > 0;
        const frontSheet = isBooklet ? $('.booklet-sheet.front-sheet') : $('.card-sheet.front-sheet');
        const backSheet = isBooklet ? $('.booklet-sheet.back-sheet') : $('.card-sheet.back-sheet');

        if ( !isBooklet ) {
          if ( !frontSheet.hasClass(preferences.size) ) {
            frontSheet.addClass(preferences.size).addClass(preferences.orientation);
            backSheet.addClass(preferences.size).addClass(preferences.orientation);
          }
          const front = wrapper.find('.card').first().clone().find('.back').remove().end();
          const back = wrapper.find('.card').first().clone().find('.front').remove().end();
          frontSheet.append(front);  backSheet.append(back);
          $('[id^="booklet"]').remove();
        } else {
          wrapper.find('.booklet .front .page').each((i, el) => frontSheet.append($(el)));
          wrapper.find('.booklet .back .page').each((i, el) => backSheet.append($(el)));
          $('[id^="card"]').remove();
        }

        // Adjust dynamic content - font sizes, and add clocks
        document.querySelectorAll('.spell-description').forEach(el => { adjustFontSizeByLength(el); });
        document.querySelectorAll("[id^='clock-container-']").forEach(el => {
          const parts = el.id.split("-");
          const segments = parseInt(parts[2], 10);
          const filled = parseInt(parts[3], 10);
          if ( !isNaN(segments) && !isNaN(filled) ) el.appendChild(createClock(segments, filled, 75));
        });
      });
    });
  };

  function populateGroups( obj, prefix ) {
    if ( !obj ) return;
    groups = {};  const groupMap = {};
    $('#controls-groups').children('option:not(:first-child)').remove();

    obj.forEach( item => {
      const grp = item.group || item.equipment_category || item.school;
      if ( grp && grp.index && !groupMap[grp.index] ) {
        groupMap[grp.index] = grp.name;
        groups[grp.index] = [];
      }
    });
    for ( const [index, name] of Object.entries(groupMap) ) {
      const label = prefix ? `${prefix} (${name})` : name;
      const option = $('<option>').val(index).text(label);
      $('#controls-groups').append(option);
    }
    obj.forEach( item => {
      const grp = item.group || item.equipment_category || item.school;
      if ( grp?.index ) groups[grp.index].push(item.index);
    });
  };

  function populateSources() {
    const sourceSelect = $('#controls-sources');
    sourceSelect.empty().append('<option value=""></option>');
    sourceDefinitions.forEach(src => {
      const option = $('<option>').val(src.id).text(src.name)
      sourceSelect.append(option);
    });
  };

  function populateTemplates() {
    fetch('/templates/list')
      .then( res => res.json() )
      .then( templates => {
        const select = document.getElementById('controls-template');
        templates.forEach( t => {
          const option = document.createElement('option');
          option.value = t.filename;
	  option.textContent = t.name || t.filename;
	  if ( t.size ) option.dataset.size = t.size;
	  if ( t.orientation ) option.dataset.orientation = t.orientation;
          select.appendChild(option);
        });
      });
  };

  function populateFromData( data ) {
    populateGroups(data);
    data.forEach( item => {
      $('#controls-select').append( $('<option />').val(item.index).text(item.name) );
    });
    selectOptions = Array.from(document.getElementById('controls-select').options);
    alphabetizeSelectList($('#controls-select'));
  };

  function selectSource( el ) {
    const selectedId = el.value;
    const source = sourceDefinitions.find(s => s.id === selectedId);
    if ( !source ) return;

    $('#controls-select').empty();
    $('#controls-groups').children('option:not(:first-child)').remove();

    // Handle visibility based on method
    $('#controls-container-id').toggle(source.method == 'ddb');
    $('#controls-container-select').toggle(source.method !== 'ddb');
    $('#controls-container-groups').toggle(source.method !== 'ddb');

    // Select template
    if ( source.type === 'spell' ) $('#controls-template').val('card-spell').change();
    else if ( source.type == 'equipment' ) $('#controls-template').val('card-item').change();
    else if ( source.type == 'character' && source.method == 'json') $('#controls-template').val('card-npc').change();
    else if ( source.type == 'character' && source.method == 'ddb') $('#controls-template').val('notecard-character').change();
    else if ( source.type == 'ancestry' && source.system == 'triskele') $('#controls-template').val('card-triskele-ancestry').change();
    else if ( source.type == 'background' && source.system == 'triskele') $('#controls-template').val('card-triskele-background').change();
    else if ( source.type == 'class' && source.system == 'triskele') $('#controls-template').val('card-triskele-class').change();
    else if ( source.type == 'scene' && source.system == 'triskele') $('#controls-template').val('page-triskele-scene').change();

    // Handle content loading - utilizing cache if available
    if ( sourceCache[selectedId] ) {
      populateFromData(sourceCache[selectedId]);
      return;
    }

    if ( source.method == 'json' ) {
      $.getJSON( source.path, data => {
	sourceCache[source.id] = data;
	populateFromData(data);
      });
    } else if ( source.method === 'api' ) {
      let apiItems = [];
      const data = getAPI(source.url).results;
      if ( source.childKey ) {	// Grouped data (like equipment categories)
        data.forEach(group => {
          const groupData = getAPI(`${source.url}/${group.index}`);
          if ( !groupData || !groupData[source.childKey] ) return;
          const groupItems = groupData[source.childKey].map(item => ({
            index: item.index,  name: item.name,  url: item.url,
            group: { index: group.index, name: group.name }
          }));
          apiItems.push(...groupItems);
        });
      } else {	// Flat data (like spells, classes, monsters, etc.)
        apiItems = data.map(item => ({ index: item.index, name: item.name, url: item.url }));
      }
      sourceCache[source.id] = apiItems;
      populateFromData(apiItems);
    }
    setPreferences();
  };

  function selectGroup( el ) {
    const itemSelect = document.getElementById('controls-select');
    const groupSelect = document.getElementById('controls-groups');
    const selectedGroup = groupSelect.value;

    itemSelect.innerHTML = '';
    if ( !selectedGroup || !groups[selectedGroup] ) {
      selectOptions.forEach((opt, idx) => { itemSelect.appendChild(opt.cloneNode(true)); });
    } else {
      const allowed = new Set(groups[selectedGroup]);
      selectOptions.forEach((opt, idx) => {
        if ( allowed.has(opt.value) ) itemSelect.appendChild(opt.cloneNode(true));
      });
    }
  };

  function generatePrint( el ) {
    var sel = $("#controls-select option:selected").val();
    if ( sel ) {
      createPrint( getPrintData(sel) );
    } else {
      var charId = $('#controls-id').val();
      var char = ddbGetFromEndpoint('character', charId)['data'];
      char = ddbParseCharacter(char);
      createPrint(char);
    }
    toolbarShowItem('item-actions');
  };

  function clearPrints() {
    $('#print-container div').empty()
    toolbarHideItem('item-actions');
  };

  function createPDF() {
    const element = document.getElementById("print-container");
    const opt = {
      margin:       0,
      filename:     'cards.pdf',
      image:        { type: 'jpeg', quality: 0.98 },
      html2canvas:  { scale: 3 },
      jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }
    };
    html2pdf().set(opt).from(element).save();
  };

  function loadTemplatePartials( filenames, callback ) {
    const partials = {};
    let remaining = filenames.length;
    filenames.forEach( name => {
      $.get('templates/' + name + '.htm', function( html ) {
	partials[name] = html;
	remaining--;
	if ( remaining === 0 ) callback(partials);
      });
    });
  };


  function init() {
    populateSources();
    populateTemplates();
    toolbarAddButton('controls-toolbar', 'btn-generate', '<i class="bi bi-patch-check"></i>', { title: 'Generate Print', class: 'btn-primary', onClick: () => generatePrint(this) });
    toolbarAddButton('controls-toolbar', 'btn-pdf', '<i class="bi bi-filetype-pdf"></i>', { group: 'item-actions', title: 'Create PDF', class: 'btn-info', onClick: () => createPDF() });
    toolbarAddButton('controls-toolbar', 'btn-clear', '<i class="bi bi-x-circle"></i>', { group: 'item-actions', title: 'Clear Prints', class: 'btn-danger', onClick: () => clearPrints() });
    parsePassedData((parsed, context) => { createPrint(parsed); });
    toolbarHideItem('item-actions');

    // Register callbacks
    $('#controls-select').on('dblclick', function() {
      generatePrint(this);
    });
    $('#controls-template').on('change', function() {
      const option = $(this).find('option:selected')[0];
      const size = option.dataset.size;
      const orientation = option.dataset.orientation;
      const sizeDisabled = size === 'disabled';
      const orientationDisabled = orientation === 'disabled';
      $('#controls-size').prop('disabled', sizeDisabled);
      $('#controls-orientation').prop('disabled', orientationDisabled);
      if ( !sizeDisabled && size ) $('#controls-size').val(size);
      if ( !orientationDisabled && orientation ) $('#controls-orientation').val(orientation);
      setPreferences(this);
    });
    $('#controls-size').on('change', function() {
      const newSize = $(this).val();
      const sizeClasses = [ 'tarot', 'poker', 'business', 'notecard', 'a6', 'b6' ];
      $('.card').each( function() { if ( !$(this).hasClass('nested') ) $(this).removeClass(sizeClasses.join(' ')).addClass(newSize); });
      $('.card-sheet').each( function() { $(this).removeClass(sizeClasses.join(' ')).addClass(newSize); });
      setPreferences(this);
    });
    $('#controls-orientation').on('change', function() {
      const newOrient = $(this).val();
      const sizeClasses = [ 'horizontal', 'vertical' ];
      $('.card').each( function() { if ( !$(this).hasClass('nested') ) $(this).removeClass(sizeClasses.join(' ')).addClass(newOrient); });
      $('.card-sheet').each( function() { $(this).removeClass(sizeClasses.join(' ')).addClass(newOrient); });
      setPreferences(this);
    });
    let isDragging = false;    // Handle dragging of controls box
    let offset = { x: 0, y: 0 };
    $('#controls-header').on('mousedown', function (e) {
      isDragging = true;
      const panel = $('#controls');
      offset.x = e.pageX - panel.offset().left;
      offset.y = e.pageY - panel.offset().top;
      $('body').addClass('no-select'); // optional: prevent text selection
    });
    $(document).on('mousemove', function (e) {
      if ( isDragging ) {
        $('#controls').css({ left: e.pageX - offset.x, top: e.pageY - offset.y, right: 'auto' });
      }
    });
    $(document).on('mouseup', function () {
      isDragging = false;
      $('body').removeClass('no-select');
    });
  };

  let spell_additional_schools;
  loadJSONFiles({
    spell_additional_schools: "data/spell_additional_schools.json"
  }).then(data => { ({ spell_additional_schools } = data);
    init();
  }).catch(err => console.error("Failed to load JSON:", err));
</script>

</body>
</html>