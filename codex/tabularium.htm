<!DOCTYPE html>
<html>
<head>
  <title>Codex Tabularium: TTRPG Map Creator</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="images/icon_T_32.png" rel="icon" type="image/png" sizes="32x32">
  <link href="common.css" rel="stylesheet" type="text/css">
  <link href="ddb.css" rel="stylesheet" type="text/css">
  <link href="images/icons.css" rel="stylesheet" type="text/css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
  <link href="https://cdn.rawgit.com/fponticelli/dicefont/fc6b8c47/dist/dicefont/dicefont.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js" type="text/javascript"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js" type="text/javascript"></script>
  <script src="https://unpkg.com/mustache@latest" type="text/javascript"></script>
  <script src="common.js" type="text/javascript"></script>
</head>

<body>

<header id="header"></header>

<div id="controls" class="controls">
  <div id="controls-header" class="controls-header">☰ Controls <button class="btn btn-sm btn-toggle" id="toggle-controls" onclick="$('#controls-body').toggle();"><i class="bi bi-dash-square"></i></button></div>
  <div id="controls-body">
    <div id="controls-toolbar" class="controls-toolbar"></div>

    <div class="form-group" id="controls-grid-type">
      <label for="grid-type">Grid Type:</label>
      <select id="grid-type" class="form-control">
        <option value="square">Square</option>
        <option value="hex">Hex</option>
      </select>
    </div>
    <div class="form-group" id="controls-grid-cols">
      <label for="grid-cols">Map Width (Columns):</label>
      <input type="number" id="grid-cols" class="form-control" min="1" max="100" value="10" />
    </div>
    <div class="form-group" id="controls-grid-rows">
      <label for="grid-rows">Map Height (Rows):</label>
      <input type="number" id="grid-rows" class="form-control" min="1" max="100" value="10" />
    </div>
    <div class="form-group" id="controls-grid-cell-size">
      <label for="grid-cell-size">Cell Size (px):</label>
      <input type="number" id="grid-cell-size" class="form-control" min="10" max="100" value="40" />
    </div>
    <div class="form-group" id="controls-grid-select">
      <label for="grid-select">Multi-select</label>
      <input type="checkbox" id="grid-select" class="form-control" />
    </div>
  </div>
</div>

<div id="properties-panel" class="panel">
  <div id="panel-header" class="panel-header">Properties</div>
  <div class="tabs">
    <button id="tab-cell" class="tab active">Cell</button>
    <button id="tab-region" class="tab" style="display: none;">Region</button>
  </div>

  <div id="pane-cell" class="tab-pane active">
    <div class="form-group">
      <label for="selected-ids">Selected Cells:</label>
      <div id="selected-ids" class="form-control readonly" style="min-height: 1em; padding: 0.25em;"></div>
    </div>
    <div class="form-group">
      <label for="cell-name">Name:</label>
      <input type="text" id="cell-name" class="form-control" />
    </div>
    <div class="form-group">
      <label for="cell-environment">Environment:</label>
      <select id="cell-environment" class="form-control">
        <option value="">—</option>
      </select>
    </div>
    <div class="form-group">
      <label for="cell-notes">Notes:</label>
      <textarea id="cell-notes" class="form-control" rows="2"></textarea>
    </div>
    <div class="form-group">
      <button id="create-region" class="btn btn-sm btn-primary" disabled>Create Region from Selection</button>
    </div>
  </div>

  <div id="pane-region" class="tab-pane">
    <div class="form-group">
      <label for="region-cells">Cells in Region:</label>
      <div id="region-cells" class="form-control readonly" style="min-height: 1em; padding: 0.25em;"></div>
    </div>
    <div class="form-group">
      <label for="region-name">Region Name:</label>
      <input type="text" id="region-name" class="form-control" />
    </div>
    <div class="form-group">
      <label for="region-environment">Environment:</label>
      <select id="region-environment" class="form-control">
        <option value="">—</option>
      </select>
    </div>
    <div class="form-group">
      <label for="region-notes">Notes:</label>
      <textarea id="region-notes" class="form-control" rows="2"></textarea>
    </div>
  </div>
</div>

<div id="container" class="container">
  <canvas id="mapCanvas" width="960" height="720"></canvas>
</div>

<script type="text/javascript">
  const regions = {};
  let nextRegionId = 1;
  const ENV_DISPLAY_MODE = "color";

  const ENVIRONMENTS = [
    { value: "forest",   label: "Forest",   color: "#2f5",    icon: "icons/env_forest.svg"   },
    { value: "desert",   label: "Desert",   color: "#edc066", icon: "icons/env_desert.svg"   },
    { value: "mountain", label: "Mountain", color: "#ccc",    icon: "icons/env_mountain.svg" },
    { value: "swamp",    label: "Swamp",    color: "#5a6",    icon: "icons/env_swamp.svg"    },
    { value: "urban",    label: "Urban",    color: "#888",    icon: "icons/env_urban.svg"    }
  ];

  const canvas = document.getElementById('mapCanvas');
  const ctx = canvas.getContext('2d');
  let gridType = document.getElementById('grid-type').value;
  let gridCols = parseInt(document.getElementById('grid-cols').value);
  let gridRows = parseInt(document.getElementById('grid-rows').value);
  let cellSize = parseInt(document.getElementById('grid-cell-size').value);
  let gridSelect = document.getElementById('grid-select');
  let cells = [];

  class GridCell {
    constructor(x, y) {
      this.x = x;
      this.y = y;
      this.hidden = false;
      this.highlighted = false;
      this.hover = false;
      this.data = {}; // placeholder for future metadata
    }

    get key() { return `${this.x},${this.y}`; }
  };

  function getRegionsForCell(cell) {
    return Object.values(regions).filter(region => region.cells.includes(cell.key));
  };

  function pointInPolygon( x, y, polygon ) {
    let inside = false;
    for ( let i = 0, j = polygon.length - 1; i < polygon.length; j = i++ ) {
      const xi = polygon[i][0], yi = polygon[i][1];
      const xj = polygon[j][0], yj = polygon[j][1];
      const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * (y - yi)) / (yj - yi) + xi);
      if (intersect) inside = !inside;
    }
    return inside;
  };

  function initializeGrid() {
    const previous = {};
    for ( const c of cells ) previous[c.key] = c;
    cells = [];
    for ( let y = 0; y < gridRows; y++ ) {
      for ( let x = 0; x < gridCols; x++ ) {
        const key = `${x},${y}`;
        if ( previous[key] ) {
          previous[key].hover = false;
          previous[key].highlighted = false;
          cells.push(previous[key]);
        } else { cells.push(new GridCell(x, y)); }
      }
    }
  };

  function drawGrid() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for ( const cell of cells ) { drawCell(cell, gridType); }
  };

  function drawCell( cell, type ) {
    if ( type == 'square' ) {
      const x = cell.x * cellSize;
      const y = cell.y * cellSize;
      ctx.strokeStyle = cell.highlighted ? '#00f' : cell.hover ? '#888' : '#444';
      ctx.lineWidth = cell.highlighted ? 2 : 1;
      ctx.strokeRect(x, y, cellSize, cellSize);
      if ( cell.highlighted ) {
        ctx.fillStyle = 'rgba(0, 0, 255, 0.1)';
        ctx.fillRect(x, y, cellSize, cellSize);
      } else if ( cell.hover ) {
        ctx.fillStyle = 'rgba(255, 255, 0, 0.1)';
        ctx.fillRect(x, y, cellSize, cellSize);
      }
    } else if ( type == 'hex' ) {
      const size = cellSize / 2;
      const w = size * 2;
      const h = Math.sqrt(3) * size;
      const horizSpacing = (3 / 4) * w;
      const vertSpacing = h;
      const offsetX = size;
      const offsetY = size;
      const x = cell.x * horizSpacing + offsetX;
      const y = cell.y * vertSpacing + (cell.x % 2 === 1 ? vertSpacing / 2 : 0) + offsetY;
      const corners = [];
      for (let i = 0; i < 6; i++) {
        const angle = Math.PI / 180 * (60 * i);
        corners.push([ x + size * Math.cos(angle), y + size * Math.sin(angle) ]);
      }
      ctx.beginPath();
      ctx.moveTo(corners[0][0], corners[0][1]);
      for ( let i = 1; i < 6; i++ ) {
        ctx.lineTo(corners[i][0], corners[i][1]);
      }
      ctx.closePath();
      ctx.strokeStyle = cell.highlighted ? '#0f0' : cell.hover ? '#aaa' : '#555';
      ctx.lineWidth = cell.highlighted ? 2 : 1;
      ctx.stroke();
      if ( cell.highlighted ) {
        ctx.fillStyle = 'rgba(0, 0, 255, 0.1)';
        ctx.fill();
      } else if ( cell.hover ) {
        ctx.fillStyle = 'rgba(255, 255, 0, 0.1)';
        ctx.fill();
      }
    }

    var env = ENVIRONMENTS.find(env => env.value === cell.data.environment);
    if ( cell.data.environment && env ) {
      if ( ENV_DISPLAY_MODE == "color" ) {
        ctx.fillStyle = env.color;
        ctx.globalAlpha = 0.3;
        if ( type == "square" ) {
          const x = cell.x * cellSize;
          const y = cell.y * cellSize;
          ctx.fillRect(x, y, cellSize, cellSize);
        } else if ( type == "hex" ) {
          const size = cellSize / 2;
          const w = size * 2;
          const h = Math.sqrt(3) * size;
          const horizSpacing = (3 / 4) * w;
          const vertSpacing = h;
          const offsetX = size;
          const offsetY = size;
          const cx = cell.x * horizSpacing + offsetX;
          const cy = cell.y * vertSpacing + (cell.x % 2 === 1 ? vertSpacing / 2 : 0) + offsetY;
          ctx.beginPath();
          for ( let i = 0; i < 6; i++ ) {
            const angle = Math.PI / 180 * (60 * i);
            const px = cx + size * Math.cos(angle);
            const py = cy + size * Math.sin(angle);
            if ( i == 0 ) ctx.moveTo(px, py);
            else ctx.lineTo(px, py);
          }
          ctx.closePath();
          ctx.fill();
        }
        ctx.globalAlpha = 1;
      } else if ( ENV_DISPLAY_MODE == "icon" ) {
        const img = envIcons[cell.data.environment];
        if ( img.complete ) {
          let x, y, w, h;
          w = h = Math.floor(cellSize * 0.6);
          if ( type == "square" ) {
            x = cell.x * cellSize + (cellSize - w) / 2;
            y = cell.y * cellSize + (cellSize - h) / 2;
          } else if ( type == "hex" ) {
            const size = cellSize / 2;
            const horizSpacing = (3 / 4) * size * 2;
            const vertSpacing = Math.sqrt(3) * size;
            const offsetX = size;
            const offsetY = size;
            x = cell.x * horizSpacing + offsetX - w / 2;
            y = cell.y * vertSpacing + (cell.x % 2 === 1 ? vertSpacing / 2 : 0) + offsetY - h / 2;
          }
          ctx.drawImage(img, x, y, w, h);
        }
      }
    }

    if ( cell.data.name ) {
      const maxFontSize = Math.floor(cellSize * 0.3);
      let fontSize = maxFontSize;
      ctx.font = `${fontSize}px sans-serif`;
      // Measure and shrink if needed
      let textWidth = ctx.measureText(cell.data.name).width;
      const maxWidth = cellSize * 0.9; // allow a bit of margin
      while ( textWidth > maxWidth && fontSize > 6 ) {
        fontSize--;
        ctx.font = `${fontSize}px sans-serif`;
        textWidth = ctx.measureText(cell.data.name).width;
      }
      ctx.fillStyle = "#000";
      ctx.textAlign = "center";
      ctx.textBaseline = "bottom";
      let x, y;
      if ( type == "square" ) {
        x = cell.x * cellSize + cellSize / 2;
        y = cell.y * cellSize + cellSize - 2;
      } else if ( type == "hex" ) {
        const size = cellSize / 2;
        const horizSpacing = (3 / 4) * size * 2;
        const vertSpacing = Math.sqrt(3) * size;
        const offsetX = size;
        const offsetY = size;
        x = cell.x * horizSpacing + offsetX;
        y = cell.y * vertSpacing + (cell.x % 2 === 1 ? vertSpacing / 2 : 0) + offsetY + size * 0.85;
      }
      ctx.fillText(cell.data.name, x, y);
    }

  };

  function getCellAt( px, py, type ) {
    if ( type === 'square' ) {
      const x = Math.floor(px / cellSize);
      const y = Math.floor(py / cellSize);
      return cells.find(c => c.x === x && c.y === y);
    } else if ( type === 'hex' ) {
      const size = cellSize / 2;
      const w = size * 2;
      const h = Math.sqrt(3) * size;
      const horizSpacing = (3 / 4) * w;
      const vertSpacing = h;
      const offsetX = size;
      const offsetY = size;
      //const col = Math.floor((px - offsetX) / horizSpacing);
      //const row = Math.floor( (py - offsetY - (col % 2 === 1 ? vertSpacing / 2 : 0)) / vertSpacing );
      //return cells.find(c => c.x === col && c.y === row);

      const approxCol = Math.floor((px - offsetX) / horizSpacing);
      const approxRow = Math.floor( (py - offsetY - (approxCol % 2 === 1 ? vertSpacing / 2 : 0)) / vertSpacing );

      for ( let dy = -1; dy <= 1; dy++ ) {  // Check the surrounding 3×3 cells to catch edge overlaps
        for ( let dx = -1; dx <= 1; dx++ ) {
          const col = approxCol + dx;
          const row = approxRow + dy;
          const cell = cells.find(c => c.x === col && c.y === row);
          if ( !cell ) continue;
          const cx = col * horizSpacing + offsetX;
          const cy = row * vertSpacing + (col % 2 === 1 ? vertSpacing / 2 : 0) + offsetY;
          const corners = [];
          for ( let i = 0; i < 6; i++ ) {
            const angle = Math.PI / 180 * (60 * i);
            corners.push([ cx + size * Math.cos(angle), cy + size * Math.sin(angle) ]);
          }
          if ( pointInPolygon(px, py, corners) ) return cell;
        }
      }
    }
    return null;
  };

  function resizeCanvas() {
    if ( gridType === 'square' ) {
      canvas.width = gridCols * cellSize;
      canvas.height = gridRows * cellSize;
    } else {
      const w = cellSize * 2;
      const h = Math.sqrt(3) * cellSize;
      const horizSpacing = (3 / 4) * w;
      const vertSpacing = h;
      const padding = cellSize * 2;
      canvas.width = (gridCols - 1) * horizSpacing + w + padding;
      canvas.height = (gridRows - 1) * vertSpacing + h + padding;
    }
  };

  function updatePropertiesPanel() {
    const selected = cells.filter(c => c.highlighted);
    const hasSelection = selected.length > 0;
    const selectedIds = selected.map(c => c.key);

    document.getElementById('selected-ids').textContent = hasSelection ? selectedIds.join(', ') : '(none)';
    document.querySelectorAll('[id^="cell-"]').forEach(el => { el.disabled = !hasSelection; });
    document.getElementById('create-region').disabled = !gridSelect.checked || !hasSelection;

    if (selected.length === 1) {
      const cell = selected[0];
      document.getElementById('cell-name').value = cell.data.name || '';
      document.getElementById('cell-environment').value = cell.data.environment || '';
      document.getElementById('cell-notes').value = cell.data.notes || '';
    } else {
      document.getElementById('cell-name').value = '';
      document.getElementById('cell-environment').value = '';
      document.getElementById('cell-notes').value = '';
    }

    const matchedRegions = Object.values(regions).filter(region =>
      selected.every(cell => region.cells.includes(cell.key))
    );

    if ( matchedRegions.length > 0 ) {
      const region = matchedRegions[0]; // For now: just use the first
      document.getElementById('tab-region').style.display = '';
      document.getElementById('region-name').value = region.name || '';
      document.getElementById('region-environment').value = region.environment || '';
      document.getElementById('region-notes').value = region.notes || '';
      document.getElementById('region-cells').textContent = region.cells.join(', ');
      document.getElementById('properties-panel').dataset.activeRegion = region.id;
    } else {
      document.getElementById('tab-region').style.display = 'none';
      document.getElementById('region-name').value = '';
      document.getElementById('region-environment').value = '';
      document.getElementById('region-notes').value = '';
      document.getElementById('region-cells').textContent = '';
      delete document.getElementById('properties-panel').dataset.activeRegion;
    }
    setActiveTab('cell');
    drawGrid();
  };

  function setActiveTab( tab ) {
    document.querySelectorAll('.tab').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
    document.getElementById(`tab-${tab}`).classList.add('active');
    document.getElementById(`pane-${tab}`).classList.add('active');
  };


  // Event listeners
  document.querySelectorAll('[id^=grid-]').forEach( elem => elem.addEventListener('click', () => {
    gridType = document.getElementById('grid-type').value;
    gridCols = parseInt(document.getElementById('grid-cols').value);
    gridRows = parseInt(document.getElementById('grid-rows').value);
    cellSize = parseInt(document.getElementById('grid-cell-size').value);

    resizeCanvas();
    initializeGrid();
    drawGrid();
  }));

  document.getElementById('cell-name').addEventListener('input', (e) => {
    const value = e.target.value;
    for ( const cell of cells ) { if ( cell.highlighted ) cell.data.name = value; }
    drawGrid();
  });

  document.getElementById('cell-environment').addEventListener('change', (e) => {
    const value = e.target.value;
    for ( const cell of cells ) { if ( cell.highlighted ) cell.data.environment = value; }
    drawGrid();
  });

  document.getElementById('cell-notes').addEventListener('input', (e) => {
    const value = e.target.value;
    for ( const cell of cells ) { if ( cell.highlighted ) cell.data.notes = value; }
    drawGrid();
  });

  document.getElementById('region-name').addEventListener('input', e => {
    const id = document.getElementById('properties-panel').dataset.activeRegion;
    if ( regions[id] ) regions[id].name = e.target.value;
    drawGrid();
  });

  document.getElementById('region-environment').addEventListener('change', e => {
    const id = document.getElementById('properties-panel').dataset.activeRegion;
    if (regions[id]) regions[id].environment = e.target.value;
    drawGrid();
  });

  document.getElementById('region-notes').addEventListener('input', e => {
    const id = document.getElementById('properties-panel').dataset.activeRegion;
    if ( regions[id] ) regions[id].notes = e.target.value;
  });

  canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    const px = e.clientX - rect.left;
    const py = e.clientY - rect.top;
    for ( const cell of cells ) cell.hover = false;
    const cell = getCellAt(px, py, gridType);
    if ( cell ) {
      cell.hover = true;
      drawGrid();
    }
  });

  canvas.addEventListener('click', (e) => {
    const rect = canvas.getBoundingClientRect();
    const px = e.clientX - rect.left;
    const py = e.clientY - rect.top;
    const cell = getCellAt(px, py, gridType);
    if ( !cell ) return;
    const isMulti = gridSelect.checked;
    if ( isMulti ) { cell.highlighted = !cell.highlighted;
    } else {
      if ( cell.highlighted && cells.filter(c => c.highlighted).length === 1 ) {
        cell.highlighted = false;      // If already selected, unselect it
      } else {
        for ( const c of cells ) c.highlighted = false;
        cell.highlighted = true;
      }
    }
    updatePropertiesPanel();
  });

  document.getElementById('create-region').addEventListener('click', () => {
    const selected = cells.filter(c => c.highlighted);
    if ( !gridSelect.checked || selected.length === 0 ) return;
    const regionId = `region-${nextRegionId++}`;
    const regionName = prompt("Name this region:", `New Region ${nextRegionId - 1}`);
    if ( !regionName ) return;
    const keys = selected.map(c => c.key);
    regions[regionId] = { id: regionId, name: regionName, environment: "", notes: "", cells: keys };
    document.getElementById('properties-panel').dataset.activeRegion = regionId;
    updatePropertiesPanel();
    document.getElementById('tab-region').style.display = '';
    setActiveTab('region');
    drawGrid();
  });

  document.getElementById('tab-cell').addEventListener('click', () => setActiveTab('cell'));
  document.getElementById('tab-region').addEventListener('click', () => setActiveTab('region'));


  // Init
  populateSelect("cell-environment", ENVIRONMENTS);
  populateSelect("region-environment", ENVIRONMENTS);
  initializeGrid();
  resizeCanvas();
  updatePropertiesPanel();
</script>

</body>
</html>